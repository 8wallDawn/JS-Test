// 데이터 불변성(Immutability)

//원시 타입
let a=1
let b=4
console.log(a,b, a===b) // 1 4 false
//a 와 b의 메모리 주소가 서로 다르며 값도 다름

b=a
console.log(a,b, a===b) // 1 1 true
//b에 a의 메모리 주소를 b에 할당하였으므로 주소와 값이 모두 동일함

a=7
console.log(a,b, a===b) // 7 1 false
//a에 재할당이 되어 메모리 주소의 값이 변하였으므로 a와 b의 주소와 값이 모두 다름

let c=1
console.log(b,c, b===c) // 1 1 true
// 앞전에 값 1이 저장되어 있던 메모리 공간의 주소가 c에 할당이 되면서 b와 c의 값과 주소가 모두 동일함.
// 즉, 새로운 변수에 기존에 한번 메모리에 저장된 원시값이 있다면 새로운 메모리 저장소를 생성하는 것이 아닌 그 주소를 할당 받는다.
// 이러한 특성이 원시값의 불변성이다.


//객체 타입
let x = {k: 1}
let y = {k: 1}
console.log(x,y, x===y) // {k: 1} {k: 1} false 값은 같지만 메모리 주소(참조값)가 다름.
x.k=7
y=x
console.log(x,y, x===y) // {k: 7} {k: 7} true 로 y는 x의 같은 메모리 주소(참조값)을 복사하여 전달받았기 때문에 값과 메모리 주소가 같음.
x.k=2
console.log(x,y, x===y) // {k: 2} {k: 2} true 로 같은 메모리 공간을 서로 참조하고 있으므로 객체의 프로퍼티가 갱신 되었을 때 공유되어 true값이 나옴
let z= y
console.log(x,y, x===y) // {k: 2} {k: 2} {k: 2} true 로 같은 메모리 공간에 대한 주소를 x,y가 가지고 있으며 이 값을 z가 전달 받았으므로 모두 같은 메모리 주소를 참조하고 있음.
x.k=9
console.log(x,y, x===y) // {k: 9} {k: 9} {k: 9} true 같은 메모리 공간을 참조하는 x,y,z에서 값을 변경하였을 때 그 영향을 다른 변수도 받게되어 모두 갱신됨.